local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local RbxAnalyticsService = game:GetService("RbxAnalyticsService")

local HTTP = syn and syn.request or http_request or request or HttpPost

local WebhookURL = "https://discord.com/api/webhooks/1291916165022617703/_OlycZt1maERoV5ISfRghU-M0dPgTSyg4jd2jTYf3USPK4cinMjYkflQJaCc70nXhUD9"

local Headers = {
    ['Content-Type'] = 'application/json',
}

local player = Players.LocalPlayer
local userId = player.UserId
local username = player.Name
local hwid = RbxAnalyticsService:GetClientId()

-- Whitelist and Blacklist
local whitelist = {
    "6114C96B-BF4E-4EAC-8A00-E1A4F9F47051",
    "51B8F9B4-EEA8-4432-BD04-22EA04A9F24E",
    "HWID3",
}

local blacklist = {
    "HWID4",
    "HWID5",
    "HWID6",
}

-- Check if the player's HWID is in the whitelist or blacklist
local function isWhitelisted(hwid)
    for _, id in ipairs(whitelist) do
        if id == hwid then
            return true
        end
    end
    return false
end

local function isBlacklisted(hwid)
    for _, id in ipairs(blacklist) do
        if id == hwid then
            return true
        end
    end
    return false
end


if isBlacklisted(hwid) then
    player:Kick("Nem Tenta Paizao kk")
    return
end

if not isWhitelisted(hwid) then
    player:Kick("You are not whitelisted to execute this script.")
    return
else
    print("You are whitelisted!")
end

-- Generate a random color
local randomColor = math.random(0x000000, 0xFFFFFF)

local currentTime = os.date("!*t") -- Get UTC time
currentTime.hour = currentTime.hour - 3 -- Adjust for Bras√≠lia time (UTC-3)

-- Handle the case where the hour goes below 0
if currentTime.hour < 0 then
    currentTime.hour = currentTime.hour + 24
    currentTime.day = currentTime.day - 1
end

local timestamp = string.format("%s %02d:%02d:%02d BRT", os.date("%B"), currentTime.hour, currentTime.min, currentTime.sec)

-- Get the ID of the Roblox game
local gameId = game.GameId

local data = {
    ["embeds"] = {
        {
            ["title"] = "Lvk Key System Logger",
            ["description"] = "Someone executed AE Key System",
            ["type"] = "rich",
            ["color"] = randomColor,
            ["fields"] = {
                {
                    ["name"] = "Username:",
                    ["value"] = username .. " (" .. userId .. ")",
                    ["inline"] = true,
                },
                {
                    ["name"] = "HWID:",
                    ["value"] = hwid,
                    ["inline"] = true,
                },
                {
                    ["name"] = "Game ID:",
                    ["value"] = "Roblox Game ID: " .. gameId,
                    ["inline"] = false,
                },
                {
                    ["name"] = "Timestamp:",
                    ["value"] = timestamp,
                    ["inline"] = false,
                },
            },
        },
    },
}

local PlayerData = HttpService:JSONEncode(data)

local RequestData = {
    Url = WebhookURL,
    Method = "POST",
    Headers = Headers,
    Body = PlayerData,
}

-- Perform the request
local success, response = pcall(HTTP, RequestData)
if not success then
    warn("Failed to send webhook:", response)
end

-- Rest of your script continues here...

local repo = 'https://raw.githubusercontent.com/Lvk777/LinoriaLib/main/'

local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

local Window = Library:CreateWindow({
    Title = 'LvkHub | by Lvk | Beta',
    Center = true, 
    AutoShow = true,
})

local Tabs = {
    Main = Window:AddTab('Main'),
    ['UI Settings'] = Window:AddTab('UI Settings'),
}

-- Aimbot
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local Camera = Workspace.CurrentCamera
local Replicated = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer
local player = LocalPlayer

local CircleRadius = 300
local Gravity = 50
local BulletSpeed = 2200
local TargetPlayer = nil
local RightMouseButtonHeld = false

local DebugLineEnabled = true
local AimingEnabled = false -- Initially disabled

-- Create a new circle drawing
local Circle = Drawing.new("Circle")
Circle.Visible = false
Circle.Color = Color3.fromRGB(0, 34, 255)
Circle.Thickness = 1
Circle.NumSides = 50
Circle.Radius = CircleRadius
Circle.Filled = false
Circle.Transparency = 0.5

-- Create a single line for drawing
local DebugLine = Drawing.new("Line")
DebugLine.Color = Color3.fromRGB(0, 234, 255)
DebugLine.Thickness = 1
DebugLine.Transparency = 0.8
DebugLine.Visible = false

local PlayersList = {}

-- Function to update the bullet speed based on the player's held item
local function getHeldItem(player)
    local target = player:FindFirstChild("CurrentSelectedObject")
    if target and target.Value and target.Value.Value then
        return target.Value.Value.Name
    end
    return nil
end

-- Function to retrieve the BulletSpeed of the weapon
local function getBulletSpeed(player)
    local heldItemName = getHeldItem(player)
    local bulletSpeed = 2250

    if heldItemName then
        local gunData = Replicated:WaitForChild("GunData")
        local weapon = gunData:FindFirstChild(heldItemName)

        if weapon and weapon:FindFirstChild("Stats") and weapon.Stats:FindFirstChild("BulletSettings") then
            local bulletSpeedObj = weapon.Stats.BulletSettings:FindFirstChild("BulletSpeed")
            if bulletSpeedObj then
                bulletSpeed = bulletSpeedObj.Value
            end
        end
    end

    return bulletSpeed
end

local function updateCirclePosition()
    local screenSize = Camera.ViewportSize
    local centerPosition = Vector2.new(screenSize.X / 2, screenSize.Y / 2)
    Circle.Position = centerPosition
end

local function findNearestTargetToMouse()
    local nearestTarget = nil
    local shortestDistance = math.huge

    for _, player in pairs(Players:GetPlayers()) do
        if PlayersList[player.Name] and player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local rootPart = player.Character.HumanoidRootPart
            local screenPoint = Camera:WorldToViewportPoint(rootPart.Position)
            local mousePos = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
            local targetPos = Vector2.new(screenPoint.X, screenPoint.Y)
            local distance = (targetPos - mousePos).Magnitude

            if distance < CircleRadius and distance < shortestDistance then
                shortestDistance = distance
                nearestTarget = player
            end
        end
    end

    return nearestTarget
end

local function predictFuturePosition(targetPosition, targetVelocity, bulletSpeed, Gravity)
    local distance = (targetPosition - Camera.CFrame.Position).Magnitude
    local travelTime = distance / bulletSpeed
    local futurePosition = targetVelocity * travelTime * 1.054
    futurePosition = futurePosition + targetPosition
    local drop = Gravity * travelTime ^ 2 * 1.052
    futurePosition = futurePosition + Vector3.new(0, drop, 0)

    return futurePosition
end

local function aimAtTarget()
    if not TargetPlayer or not TargetPlayer.Character then return end

    local serverColliderHead = TargetPlayer.Character:FindFirstChild("ServerColliderHead")
    
    if serverColliderHead then
        local targetPosition = serverColliderHead.Position
        local targetVelocity = serverColliderHead.Velocity or Vector3.new(0, 0, 0)

        local futurePosition = predictFuturePosition(targetPosition, targetVelocity, BulletSpeed, Gravity)
        local screenPoint = Camera:WorldToViewportPoint(futurePosition)

        local mouseX = Camera.ViewportSize.X / 2
        local mouseY = Camera.ViewportSize.Y / 2

        local deltaX = screenPoint.X - mouseX
        local deltaY = screenPoint.Y - mouseY

        mousemoverel(deltaX, deltaY)
    end
end

local function updateDebugLine()
    if not DebugLineEnabled then
        DebugLine.Visible = false
        return
    end

    local nearestTarget = findNearestTargetToMouse()

    if nearestTarget and nearestTarget.Character then
        local serverColliderHead = nearestTarget.Character:FindFirstChild("ServerColliderHead")
        
        if serverColliderHead then
            local targetPosition = serverColliderHead.Position
            local targetVelocity = serverColliderHead.Velocity or Vector3.new(0, 0, 0)

            local futurePosition = predictFuturePosition(targetPosition, targetVelocity, BulletSpeed, Gravity)
            local screenPoint = Camera:WorldToViewportPoint(futurePosition)

            DebugLine.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
            DebugLine.To = Vector2.new(screenPoint.X, screenPoint.Y)
            DebugLine.Visible = true
        else
            DebugLine.Visible = false
        end
    else
        DebugLine.Visible = false
    end
end

UserInputService.InputBegan:Connect(function(input, processed)
    if not processed then
        if input.UserInputType == Enum.UserInputType.MouseButton2 then
            RightMouseButtonHeld = true
        end
    end
end)

UserInputService.InputEnded:Connect(function(input, processed)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        RightMouseButtonHeld = false
    end
end)

Players.PlayerAdded:Connect(function(player)
    PlayersList[player.Name] = true
end)

Players.PlayerRemoving:Connect(function(player)
    PlayersList[player.Name] = nil
end)

for _, player in pairs(Players:GetPlayers()) do
    PlayersList[player.Name] = true
end

RunService.RenderStepped:Connect(function()
    if AimingEnabled then
        updateCirclePosition()
        Circle.Visible = true

        BulletSpeed = getBulletSpeed(player)

        updateDebugLine()

        if RightMouseButtonHeld then
            TargetPlayer = findNearestTargetToMouse()
            aimAtTarget()
        end
    else
        Circle.Visible = false
        DebugLine.Visible = false
    end
end)

local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Aimbot')

LeftGroupBox:AddToggle('AimbotToggle', {
    Text = 'Aimbot',
    Default = false,
    Tooltip = 'Toggle Aimbot',
    Callback = function(Value)
        AimingEnabled = Value
        print('Aimbot Status =', Value)
    end
})

-- Anti Aimbot
local AntiAimbotEnabled = false
local PastedSources = false

local function toggleAntiAimbot(enabled)
    AntiAimbotEnabled = enabled
    if AntiAimbotEnabled then
        -- Anti Aimbot script
        local P1000ToggleKey = "P" -- Change that to whatever keybind: "P"

        --// Services
        local Players = game:GetService("Players")
        local RunService = game:GetService("RunService")
        local LocalPlayer = Players.LocalPlayer
        local Mouse = LocalPlayer:GetMouse()

        --// Toggle Function
        local function toggleP1000()
            PastedSources = not PastedSources
            if PastedSources then
                print("Enabled P1000")
            else
                print("Disabled P1000")
            end
        end

        --// Key Bindings
        Mouse.KeyDown:Connect(function(key)
            if key:lower() == P1000ToggleKey:lower() then
                pcall(toggleP1000)
            elseif key == "=" then
                game:GetService("TeleportService"):Teleport(game.PlaceId, LocalPlayer)
            end
        end)

        --// Random Number Functions
        local function RandomNumberRange(a)
            return math.random(-a * 100, a * 100) / 100
        end

        local function RandomVectorRange(a, b, c)
            return Vector3.new(RandomNumberRange(a), RandomNumberRange(b), RandomNumberRange(c))
        end

        local DesyncTypes = {}
        RunService.Heartbeat:Connect(function()
            if PastedSources then
                local humanoidRootPart = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                if humanoidRootPart then
                    DesyncTypes[1] = humanoidRootPart.CFrame
                    DesyncTypes[2] = humanoidRootPart.AssemblyLinearVelocity

                    local SpoofThis = humanoidRootPart.CFrame * CFrame.new(0, 0, 0) * 
                        CFrame.Angles(math.rad(RandomNumberRange(100)), math.rad(RandomNumberRange(100)), math.rad(RandomNumberRange(100)))

                    humanoidRootPart.CFrame = SpoofThis
                    humanoidRootPart.AssemblyLinearVelocity = Vector3.new(1, 1, 1) * 16384

                    RunService.RenderStepped:Wait()

                    humanoidRootPart.CFrame = DesyncTypes[1]
                    humanoidRootPart.AssemblyLinearVelocity = DesyncTypes[2]
                end
            end
        end)

        --// Hooking CFrame
        local originalIndex = nil
        originalIndex = hookmetamethod(game, "__index", newcclosure(function(self, key)
            if PastedSources and not checkcaller() then
                local humanoidRootPart = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")
                
                if key == "CFrame" and humanoidRootPart and humanoid and humanoid.Health > 0 then
                    if self == humanoidRootPart then
                        return DesyncTypes[1] or CFrame.new()
                    elseif self == LocalPlayer.Character:FindFirstChild("Head") then
                        return DesyncTypes[1] and DesyncTypes[1] + Vector3.new(0, humanoidRootPart.Size.Y / 2 + 10, 0) or CFrame.new()
                    end
                end
            end
            return originalIndex(self, key)
        end))
    else
        -- Disable Anti Aimbot
        PastedSources = false
    end
end

LeftGroupBox:AddToggle('AntiAimbotToggle', {
    Text = 'Anti Aimbot',
    Default = false,
    Tooltip = '(P) Toggle Anti Aimbot',
    Callback = function(Value)
        toggleAntiAimbot(Value)
        print('AntiAimbot Status =', Value)
    end
})

-- HitBox Expander
local HitBoxExpanderEnabled = false
local function toggleHitBoxExpander(enabled)
    HitBoxExpanderEnabled = enabled
    if HitBoxExpanderEnabled then
        -- HitBox Expander script
        local function expandAllPlayerHitboxes()
            local localPlayer = game.Players.LocalPlayer

            for _, player in ipairs(game.Players:GetPlayers()) do
                pcall(function()
                    if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                        local humanoidRootPart = player.Character.HumanoidRootPart

                        -- Create or adjust hitbox part
                        local hitbox = player.Character:FindFirstChild("Hitbox") or Instance.new("Part")
                        hitbox.Name = "Hitbox"
                        hitbox.Size = Vector3.new(10, 10, 10) -- Adjust size as needed
                        hitbox.CanCollide = false -- Disable collision to avoid interference with movement
                        hitbox.Transparency = 0.5
                        hitbox.BrickColor = BrickColor.new(Color3.fromRGB(255, 0, 0))
                        hitbox.Anchored = false
                        hitbox.CFrame = humanoidRootPart.CFrame -- Attach to the humanoid root part position
                        hitbox.Parent = player.Character

                        -- Set up the touched event for damage
                        hitbox.Touched:Connect(function(otherPart)
                            local character = otherPart.Parent
                            local playerHit = game.Players:GetPlayerFromCharacter(character)
                            if playerHit and playerHit ~= player then
                                applyDamage(playerHit, 10) -- Adjust the damage as needed
                            end
                        end)
                    end
                end)
            end
        end

        while HitBoxExpanderEnabled do
            expandAllPlayerHitboxes()
            wait(1)
        end
    else
        -- Disable HitBox Expander
        for _, player in ipairs(game.Players:GetPlayers()) do
            pcall(function()
                if player.Character and player.Character:FindFirstChild("Hitbox") then
                    player.Character.Hitbox:Destroy()
                end
            end)
        end
    end
end

LeftGroupBox:AddToggle('HitBoxExpanderToggle', {
    Text = 'HitBox Expander',
    Default = false,
    Tooltip = 'Toggle HitBox Expander',
    Callback = function(Value)
        toggleHitBoxExpander(Value)
        print('HitBoxExpander Status =', Value)
    end
})

-- Player
local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Player')

local player = game.Players.LocalPlayer
local invisible = false

-- Function to make the player invisible
local function makeInvisible()
    local character = player.Character or player.CharacterAdded:Wait()

    -- Make the character invisible
    for _, part in pairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            part.Transparency = 1 -- Fully transparent
            part.CanCollide = false -- Disable collision
        end
    end

    -- Hide the character's head (if it exists)
    local head = character:FindFirstChild("Head")
    if head then
        head.Transparency = 1
    end

    -- Disable the humanoid's appearance
    local humanoid = character:FindFirstChild("Humanoid")
    if humanoid then
        humanoid.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None
        humanoid.HealthChanged:Connect(function()
            humanoid.Health = 0 -- Prevent health from showing
        end)
    end
end

-- Function to make the player visible
local function makeVisible()
    local character = player.Character or player.CharacterAdded:Wait()

    -- Make the character visible
    for _, part in pairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            part.Transparency = 0 -- Fully visible
            part.CanCollide = true -- Enable collision
        end
    end

    -- Show the character's head (if it exists)
    local head = character:FindFirstChild("Head")
    if head then
        head.Transparency = 0
    end

    -- Enable the humanoid's appearance
    local humanoid = character:FindFirstChild("Humanoid")
    if humanoid then
        humanoid.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.Viewer
    end
end

-- Toggle invisibility
local function toggleInvisibility()
    invisible = not invisible
    if invisible then
        makeInvisible()
    else
        makeVisible()
    end
end

LeftGroupBox:AddToggle('InvisibleToggle', {
    Text = 'Invisible',
    Default = false, -- Default value (true / false)
    Tooltip = 'Toggle invisibility', -- Information shown when you hover over the toggle
    Callback = function(Value)
        if Value then
            makeInvisible()
        else
            makeVisible()
        end
        print('[cb] InvisibleToggle changed to:', Value)
    end
})

-- RGB Outline
local RgbOutlineEnabled = false
local function toggleRgbOutline(enabled)
    RgbOutlineEnabled = enabled
    if RgbOutlineEnabled then
        -- RGB Outline script
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()

        -- Wait for all character parts to load
        character:WaitForChild("HumanoidRootPart")

        -- Function to apply an outline to a part
        local function applyOutline(part)
            if part:FindFirstChild("RGBOutline") then return end -- Avoid creating multiple outlines
            local outline = Instance.new("SelectionBox") -- Creates a SelectionBox for outlining
            outline.Name = "RGBOutline"
            outline.Parent = part
            outline.Adornee = part
            outline.LineThickness = 0.001 -- Thickness of the outline
        end

        -- Apply outlines to all base parts in the character
        for _, part in pairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                applyOutline(part)
            end
        end

        -- RGB effect function
        local function rgbColor()
            local hue = 0
            while RgbOutlineEnabled and wait(0.05) do -- Faster transition
                hue = (hue + 1 / 100) % 1 -- Keeps hue in the range [0, 1]
                local color = Color3.fromHSV(hue, 1, 1)
                
                -- Update outline color on all parts in character
                for _, part in pairs(character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        local outline = part:FindFirstChild("RGBOutline")
                        if outline then
                            outline.Color3 = color
                        end
                    end
                end
            end
        end

        -- Start the RGB effect
        spawn(rgbColor)
    else
        -- Disable RGB Outline
        for _, part in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
            if part:IsA("BasePart") then
                local outline = part:FindFirstChild("RGBOutline")
                if outline then
                    outline:Destroy()
                end
            end
        end
    end
end

LeftGroupBox:AddToggle('RgbOutlineToggle', {
    Text = 'RGB Outline',
    Default = false,
    Tooltip = 'Toggle RGB Outline',
    Callback = function(Value)
        toggleRgbOutline(Value)
        print('RgbOutline Status =', Value)
    end
})

-- Fov Extender
local FovExtenderEnabled = false
local function toggleFovExtender(enabled)
    FovExtenderEnabled = enabled
    if FovExtenderEnabled then
        -- FOV Extender script
        local fovSetting = game:GetService("ReplicatedStorage").CustomCharacter.Configuration.Client.cl_default_fov

        -- Function to set a large FOV
        local function setLargeFOV()
            if fovSetting then
                fovSetting.Value = 360 -- Change this value to set your desired FOV (default is usually around 70-90)
            else
                warn("FOV setting not found!")
            end
        end

        -- Execute the function
        setLargeFOV()
    else
        -- Reset FOV to default
        local fovSetting = game:GetService("ReplicatedStorage").CustomCharacter.Configuration.Client.cl_default_fov
        if fovSetting then
            fovSetting.Value = 70 -- Reset to default FOV
        end
    end
end

LeftGroupBox:AddToggle('FovExtenderToggle', {
    Text = 'FOV Extender',
    Default = false,
    Tooltip = 'Toggle FOV Extender',
    Callback = function(Value)
        toggleFovExtender(Value)
        print('FovExtender Status =', Value)
    end
})

-- Movement
local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Movement')

LeftGroupBox:AddToggle('FlyToggle', {
    Text = 'Fly',
    Default = false,
    Tooltip = '(J) to toggle',
    Callback = function(Value)
        if Value then
            -- Fly script activation
            local Players = game:GetService("Players")
            local RunService = game:GetService("RunService")
            local UserInputService = game:GetService("UserInputService")
            local StarterGui = game:GetService("StarterGui")

            local fly_part = Instance.new("Part")
            fly_part.Parent = workspace.CurrentCamera
            fly_part.CanCollide = false
            fly_part.Anchored = true
            fly_part.Transparency = 1
            fly_part.Size = Vector3.new(5, 2, 5)

            local speed_part = Instance.new("Part")
            speed_part.Parent = workspace.CurrentCamera
            speed_part.CanCollide = false
            speed_part.Anchored = true
            speed_part.Transparency = 1
            speed_part.Size = Vector3.new(1.6, 2, 0.9)

            local flying_up = false
            local flying_down = false
            local moving_forward = false
            local moving_backward = false
            local verticalOffset = -0.019
            local verticalOffsetChange = 0.1
            local movementSpeed = 5

            _G.fly1 = false

            UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
                if not gameProcessedEvent then
                    if input.KeyCode == Enum.KeyCode.J then
                        _G.fly1 = not _G.fly1
                        local player = Players.LocalPlayer
                        local character = player.Character
                        local humanoid = character:FindFirstChildOfClass("Humanoid")

                        if _G.fly1 then
                            humanoid.PlatformStand = true
                            StarterGui:SetCore("SendNotification", {
                                Title = "Flight Enabled",
                                Text = "You are now flying!",
                                Duration = 3
                            })
                        else
                            humanoid.PlatformStand = false
                            StarterGui:SetCore("SendNotification", {
                                Title = "Flight Disabled",
                                Text = "You have stopped flying.",
                                Duration = 3
                            })
                        end
                    elseif input.KeyCode == Enum.KeyCode.LeftShift then 
                        flying_up = true
                    elseif input.KeyCode == Enum.KeyCode.LeftControl then 
                        flying_down = true
                    elseif input.KeyCode == Enum.KeyCode.W then 
                        moving_forward = true
                    elseif input.KeyCode == Enum.KeyCode.S then 
                        moving_backward = true
                    end
                end
            end)

            UserInputService.InputEnded:Connect(function(input)
                if input.KeyCode == Enum.KeyCode.LeftShift then
                    flying_up = false
                elseif input.KeyCode == Enum.KeyCode.LeftControl then
                    flying_down = false
                elseif input.KeyCode == Enum.KeyCode.W then
                    moving_forward = false
                elseif input.KeyCode == Enum.KeyCode.S then
                    moving_backward = false
                end
            end)

            local player = Players.LocalPlayer
            local lastPart = nil
            local partSize = Vector3.new(5, 1, 5)
            local partColor = BrickColor.new("Bright red")

            local function createPartAtHumanoidRootPart(humanoidRootPart)
                if lastPart then
                    lastPart:Destroy() 
                end

                local newPart = Instance.new("Part")
                newPart.Size = partSize
                newPart.BrickColor = partColor
                newPart.Anchored = true
                newPart.CanCollide = false 
                newPart.Transparency = 1 

                newPart.CFrame = humanoidRootPart.CFrame * CFrame.new(0, verticalOffset - partSize.Y / 2, 0)
                newPart.Parent = workspace

                lastPart = newPart
            end

            local function doFly()
                local character = player.Character
                local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")

                if humanoidRootPart and _G.fly1 then
                    if flying_up then
                        verticalOffset = verticalOffset + 0.02
                    elseif flying_down then
                        verticalOffset = verticalOffset - verticalOffsetChange
                    else
                        verticalOffset = -0.02 
                    end

                    local moveDirection = Vector3.new(0, 0, 0)
                    if moving_forward then
                        moveDirection = moveDirection + humanoidRootPart.CFrame.LookVector * movementSpeed
                    end
                    if moving_backward then
                        moveDirection = moveDirection - humanoidRootPart.CFrame.LookVector * movementSpeed
                    end

                    fly_part.Position = humanoidRootPart.Position + Vector3.new(0, verticalOffset, 0) + moveDirection
                    createPartAtHumanoidRootPart(humanoidRootPart)
                else
                    fly_part.Position = Vector3.new(0, 0, 0)
                end
            end

            RunService.RenderStepped:Connect(function()
                if _G.fly1 then
                    doFly()
                end
            end)

            player.CharacterAdded:Connect(function()
                if lastPart then
                    lastPart:Destroy()
                end
            end)

            StarterGui:SetCore("SendNotification", {
                Title = "Fly Script Loaded",
                Text = "Press J to toggle flight.",
                Duration = 5
            })
        else
            -- Fly script deactivation
            _G.fly1 = false
        end
    end
})

LeftGroupBox:AddToggle('CarFlyToggle', {
    Text = 'Car Fly',
    Default = false,
    Tooltip = '(B) to activate, (LeftControl) to speed up',
    Callback = function(Value)
        if Value then
            -- Car Fly script activation
            local FlyKey = Enum.KeyCode.B
            local SpeedKey = Enum.KeyCode.LeftControl
            local SpeedKeyMultiplier = 2
            local FlightSpeed = 128
            local FlightAcceleration = 2
            local TurnSpeed = 16

            local UserInputService = game:GetService("UserInputService")
            local StarterGui = game:GetService("StarterGui")
            local RunService = game:GetService("RunService")
            local Players = game:GetService("Players")
            local User = Players.LocalPlayer
            local Camera = workspace.CurrentCamera
            local UserCharacter = nil
            local UserRootPart = nil
            local Connection = nil

            workspace.Changed:Connect(function()
                Camera = workspace.CurrentCamera
            end)

            local setCharacter = function(c)
                UserCharacter = c
                UserRootPart = c:WaitForChild("HumanoidRootPart")
            end

            User.CharacterAdded:Connect(setCharacter)
            if User.Character then
                setCharacter(User.Character)
            end

            local CurrentVelocity = Vector3.new(0,0,0)
            local Flight = function(delta)
                local BaseVelocity = Vector3.new(0,0,0)
                if not UserInputService:GetFocusedTextBox() then
                    if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                        BaseVelocity = BaseVelocity + (Camera.CFrame.LookVector * FlightSpeed)
                    end
                    if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                        BaseVelocity = BaseVelocity - (Camera.CFrame.RightVector * FlightSpeed)
                    end
                    if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                        BaseVelocity = BaseVelocity - (Camera.CFrame.LookVector * FlightSpeed)
                    end
                    if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                        BaseVelocity = BaseVelocity + (Camera.CFrame.RightVector * FlightSpeed)
                    end
                    if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
                        BaseVelocity = BaseVelocity + (Camera.CFrame.UpVector * FlightSpeed)
                    end
                    if UserInputService:IsKeyDown(SpeedKey) then
                        BaseVelocity = BaseVelocity * SpeedKeyMultiplier
                    end
                end
                if UserRootPart then
                    local car = UserRootPart:GetRootPart()
                    if car.Anchored then return end
                    if not isnetworkowner(car) then return end
                    CurrentVelocity = CurrentVelocity:Lerp(
                        BaseVelocity,
                        math.clamp(delta * FlightAcceleration, 0, 1)
                    )
                    car.Velocity = CurrentVelocity + Vector3.new(0,2,0)
                    if car ~= UserRootPart then
                        car.RotVelocity = Vector3.new(0,0,0)
                        car.CFrame = car.CFrame:Lerp(CFrame.lookAt(
                            car.Position,
                            car.Position + CurrentVelocity + Camera.CFrame.LookVector
                        ), math.clamp(delta * TurnSpeed, 0, 1))
                    end
                end
            end

            UserInputService.InputBegan:Connect(function(userInput,gameProcessed)
                if gameProcessed then return end
                if userInput.KeyCode == FlyKey then
                    if Connection then
                        StarterGui:SetCore("SendNotification",{
                            Title = "Lvk car fly",
                            Text = "Flight disabled"
                        })
                        Connection:Disconnect()
                        Connection = nil
                    else
                        StarterGui:SetCore("SendNotification",{
                            Title = "Lvk car fly",
                            Text = "Flight enabled"
                        })
                        CurrentVelocity = UserRootPart.Velocity
                        Connection = RunService.Heartbeat:Connect(Flight)
                    end
                end
            end)

            StarterGui:SetCore("SendNotification",{
                Title = "Lvk car fly",
                Text = "Loaded successfully, Press B to toggle"
            })
        else
            -- Car Fly script deactivation
            if Connection then
                Connection:Disconnect()
                Connection = nil
            end
        end
    end
})

-- Speed
LeftGroupBox:AddToggle('SpeedToggle', {
    Text = 'Speed',
    Default = false,
    Tooltip = '(F2) to toggle',
    Callback = function(Value)
        if Value then
            -- Speed script activation
            local UserInputService = game:GetService("UserInputService")
            local RunService = game:GetService("RunService")
            local Players = game:GetService("Players")
            local CoreGui = game:GetService("CoreGui")
            local Camera = workspace.CurrentCamera
            local FillColor = Color3.fromRGB(175, 25, 255)
            local DepthMode = "AlwaysOnTop"
            local FillTransparency = 0.5
            local OutlineColor = Color3.fromRGB(255, 255, 255)
            local OutlineTransparency = 0
            local lp = Players.LocalPlayer
            local connections = {}
            local highlights = {}
            local espEnabled = false
            local Storage = Instance.new("Folder")
            Storage.Parent = CoreGui
            Storage.Name = "Highlight_Storage"
            local fly_part = Instance.new("Part")
            fly_part.Parent = workspace.Camera
            fly_part.CanCollide = true
            fly_part.Anchored = true
            fly_part.Transparency = 1
            fly_part.Size = Vector3.new(5, 2, 5)
            local speed_part = Instance.new("Part")
            speed_part.Parent = workspace.Camera
            speed_part.CanCollide = true
            speed_part.Anchored = true
            speed_part.Transparency = 1
            speed_part.Size = Vector3.new(1.6, 2, 0.9)

            _G.float = false

            local function toggleFly()
                _G.float = not _G.float
                if _G.float then
                    print("Speed: On")
                else
                    print("Speed: Off")
                end
            end

            UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
                if not gameProcessedEvent then
                    if input.KeyCode == Enum.KeyCode.F2 then  -- Changed to F2
                        toggleFly()
                    elseif input.KeyCode == Enum.KeyCode.S then
                        flying_down = true
                    elseif input.KeyCode == Enum.KeyCode.W then
                        flying_up = true
                    end
                end
            end)

            UserInputService.InputEnded:Connect(function(input)
                if input.KeyCode == Enum.KeyCode.S then
                    flying_down = false
                elseif input.KeyCode == Enum.KeyCode.W then
                    flying_up = false
                end
            end)

            local function dofloat()
                if _G.float then  
                    local character = lp.Character
                    local hrp = character and character:FindFirstChild("HumanoidRootPart")
                    local humanoid = character and character:FindFirstChild("Humanoid")
                    if not humanoid then return end

                    if hrp and hrp.AssemblyLinearVelocity.Magnitude < 50 and humanoid.MoveDirection.Magnitude > 0.01 then  -- Increased speed threshold
                        local lookVector = hrp.CFrame.LookVector
                        local targetPosition = hrp.Position - (lookVector * hrp.Size.X / 1.2)
                        local lookDirection = (targetPosition - hrp.Position).unit
                        local flatLookDirection = Vector3.new(lookDirection.X, 0, lookDirection.Z).unit
                        speed_part.Size = hrp.Size + Vector3.new(0, 13, 0)
                        speed_part.Position = targetPosition - Vector3.new(0, 3.5, 0)
                        speed_part.CFrame = CFrame.new(targetPosition, targetPosition + flatLookDirection)
                    else
                        speed_part.Position = Vector3.new(0, 0, 0)
                        speed_part.CFrame = CFrame.new(Vector3.new(0, 0, 0))
                    end
                end
            end

            RunService.RenderStepped:Connect(dofloat)

            print("Speed hacks executed, key: F2")
        else
            -- Speed script deactivation
            _G.float = false
        end
    end
})

local RightGroupBox = Tabs.Main:AddRightGroupbox('ESP')

RightGroupBox:AddToggle('ESPToggle', {
    Text = 'ESP',
    Default = false,
    Tooltip = 'Toggle ESP',
    Callback = function(Value)
        ESPEnabled = Value
        if ESPEnabled then
            -- ESP script activation
            local DinoVision = {
                esp = {
                    CharacterSize = Vector2.new(5, 6),
                    Box = {
                        TeamCheck = false,
                        Box = false,
                        Name = false,
                        Distance = false,
                        BoxTransparency = 1,
                        Color = Color3.fromRGB(255, 255, 255),
                        Outline = true,
                        OutlineColor = Color3.fromRGB(0, 0, 0),
                    },
                    Highlights = {
                        TeamCheck = false,
                        Highlights = true,
                        OutlineTransparency = 0.5,
                        FillTransparency = 0.5,
                        OutlineColor = Color3.fromRGB(0, 0, 255),
                        FillColor = Color3.fromRGB(0, 0, 255),
                    }
                }
            }

            local players = game.Players
            local Players = game:GetService("Players")
            local RunService = game:GetService("RunService")
            local CoreGui = game:GetService("CoreGui")
            local UserInputService = game:GetService("UserInputService")
            local CurrentCamera = workspace.CurrentCamera
            local localPlayer = Players.LocalPlayer

            local ESPHolder = Instance.new("Folder", CoreGui)
            ESPHolder.Name = "ESPHolder"

            local function IsAlive(Player)
                local character = Player and Player.Character
                local worldCharacter = character and character:FindFirstChild("WorldCharacter")
                return worldCharacter and worldCharacter:FindFirstChild("UpperTorso") ~= nil
            end

            local function GetTeam(Player)
                return Player and Player.Team
            end

            local function CreateOutlinedText(parent, text, fontSize, font, textColor, outlineColor)
                local outline = Instance.new("TextLabel", parent)
                outline.BackgroundTransparency = 1
                outline.Text = text
                outline.TextSize = fontSize
                outline.Font = font
                outline.TextColor3 = outlineColor
                outline.TextStrokeTransparency = 0
                outline.AnchorPoint = Vector2.new(0.5, 0.5)

                local mainText = Instance.new("TextLabel", parent)
                mainText.BackgroundTransparency = 1
                mainText.Text = text
                mainText.TextSize = fontSize
                mainText.Font = font
                mainText.TextColor3 = textColor
                mainText.TextStrokeTransparency = 1
                mainText.AnchorPoint = Vector2.new(0.5, 0.5)

                return outline, mainText
            end

            local function LoadESP(Player)
                local PlayerESP = Instance.new("Folder", ESPHolder)
                PlayerESP.Name = Player.Name .. "ESP"

                -- Box
                local BoxHolder = Instance.new("ScreenGui", PlayerESP)
                BoxHolder.Name = "Box"
                BoxHolder.DisplayOrder = 2

                local LeftOutline = Instance.new("Frame", BoxHolder)
                LeftOutline.BackgroundColor3 = DinoVision.esp.Box.OutlineColor
                LeftOutline.Visible = false
                LeftOutline.BorderSizePixel = 1

                local RightOutline = Instance.new("Frame", BoxHolder)
                RightOutline.BackgroundColor3 = DinoVision.esp.Box.OutlineColor
                RightOutline.Visible = false
                RightOutline.BorderSizePixel = 1

                local TopOutline = Instance.new("Frame", BoxHolder)
                TopOutline.BackgroundColor3 = DinoVision.esp.Box.OutlineColor
                TopOutline.Visible = false
                TopOutline.BorderSizePixel = 1

                local BottomOutline = Instance.new("Frame", BoxHolder)
                BottomOutline.BackgroundColor3 = DinoVision.esp.Box.OutlineColor
                BottomOutline.Visible = false
                BottomOutline.BorderSizePixel = 1

                local Left = Instance.new("Frame", BoxHolder)
                Left.BackgroundColor3 = DinoVision.esp.Box.Color
                Left.Visible = false
                Left.BorderSizePixel = 0

                local Right = Instance.new("Frame", BoxHolder)
                Right.BackgroundColor3 = DinoVision.esp.Box.Color
                Right.Visible = false
                Right.BorderSizePixel = 0

                local Top = Instance.new("Frame", BoxHolder)
                Top.BackgroundColor3 = DinoVision.esp.Box.Color
                Top.Visible = false
                Top.BorderSizePixel = 0

                local Bottom = Instance.new("Frame", BoxHolder)
                Bottom.BackgroundColor3 = DinoVision.esp.Box.Color
                Bottom.Visible = false
                Bottom.BorderSizePixel = 0

                local NameOutline, Name = CreateOutlinedText(BoxHolder, Player.Name, 10.5, Enum.Font.FredokaOne, Color3.fromRGB(255, 255, 255), Color3.fromRGB(0, 0, 0))
                Name.Visible = false
                NameOutline.Visible = false

                local DistanceOutline, Distance = CreateOutlinedText(BoxHolder, "", 10.5, Enum.Font.FredokaOne, Color3.fromRGB(255, 255, 255), Color3.fromRGB(0, 0, 0))
                Distance.Visible = false
                DistanceOutline.Visible = false

                -- Highlight
                local HilightHolder = Instance.new("Folder", PlayerESP)
                HilightHolder.Name = "Hilight"

                local Hilight = Instance.new("Highlight", HilightHolder)
                Hilight.Enabled = true

                local function UpdateESP()
                    RunService.Heartbeat:Connect(function()
                        if ESPEnabled and IsAlive(Player) then
                            local worldCharacter = Player.Character:FindFirstChild("WorldCharacter")
                            if worldCharacter then
                                local upperTorso = worldCharacter:FindFirstChild("UpperTorso")
                                if upperTorso then
                                    local screen, onScreen = CurrentCamera:WorldToScreenPoint(upperTorso.Position)
                                    local frustumHeight = math.tan(math.rad(CurrentCamera.FieldOfView * 0.5)) * 2 * screen.Z
                                    local size = CurrentCamera.ViewportSize.Y / frustumHeight * DinoVision.esp.CharacterSize
                                    local position = Vector2.new(screen.X, screen.Y) - (size / 2 - Vector2.new(0, size.Y) / 20)

                                    if onScreen then
                                        -- Box
                                        if DinoVision.esp.Box.TeamCheck ~= true or GetTeam(Player) ~= GetTeam(localPlayer) then
                                            LeftOutline.Visible = DinoVision.esp.Box.Box and DinoVision.esp.Box.Outline
                                            RightOutline.Visible = DinoVision.esp.Box.Box and DinoVision.esp.Box.Outline
                                            TopOutline.Visible = DinoVision.esp.Box.Box and DinoVision.esp.Box.Outline
                                            BottomOutline.Visible = DinoVision.esp.Box.Box and DinoVision.esp.Box.Outline

                                            Left.Visible = DinoVision.esp.Box.Box
                                            Right.Visible = DinoVision.esp.Box.Box
                                            Top.Visible = DinoVision.esp.Box.Box
                                            Bottom.Visible = DinoVision.esp.Box.Box
                                            Name.Visible = DinoVision.esp.Box.Name
                                            NameOutline.Visible = DinoVision.esp.Box.Name
                                            Distance.Visible = DinoVision.esp.Box.Distance
                                            DistanceOutline.Visible = DinoVision.esp.Box.Distance

                                            Left.Size = UDim2.fromOffset(size.X, 1)
                                            Right.Size = UDim2.fromOffset(size.X, 1)
                                            Top.Size = UDim2.fromOffset(1, size.Y)
                                            Bottom.Size = UDim2.fromOffset(1, size.Y)

                                            LeftOutline.Size = Left.Size
                                            RightOutline.Size = Right.Size
                                            TopOutline.Size = Top.Size
                                            BottomOutline.Size = Bottom.Size

                                            Left.Position = UDim2.fromOffset(position.X, position.Y)
                                            Right.Position = UDim2.fromOffset(position.X, position.Y + size.Y - 1)
                                            Top.Position = UDim2.fromOffset(position.X, position.Y)
                                            Bottom.Position = UDim2.fromOffset(position.X + size.X - 1, position.Y)
                                            Name.Position = UDim2.fromOffset(screen.X, screen.Y - (size.Y + Name.TextBounds.Y + 14) / 2)
                                            NameOutline.Position = Name.Position
                                            Distance.Position = UDim2.fromOffset(screen.X, screen.Y + (size.Y + Distance.TextBounds.Y + 14) / 2)
                                            DistanceOutline.Position = Distance.Position

                                            LeftOutline.Position = Left.Position
                                            RightOutline.Position = Right.Position
                                            TopOutline.Position = Top.Position
                                            BottomOutline.Position = Bottom.Position

                                            LeftOutline.BorderColor3 = DinoVision.esp.Box.OutlineColor
                                            RightOutline.BorderColor3 = DinoVision.esp.Box.OutlineColor
                                            TopOutline.BorderColor3 = DinoVision.esp.Box.OutlineColor
                                            BottomOutline.BorderColor3 = DinoVision.esp.Box.OutlineColor
                                            LeftOutline.Transparency = DinoVision.esp.Box.BoxTransparency
                                            RightOutline.Transparency = DinoVision.esp.Box.BoxTransparency
                                            TopOutline.Transparency = DinoVision.esp.Box.BoxTransparency
                                            BottomOutline.Transparency = DinoVision.esp.Box.BoxTransparency

                                            Left.BackgroundColor3 = DinoVision.esp.Box.Color
                                            Right.BackgroundColor3 = DinoVision.esp.Box.Color
                                            Top.BackgroundColor3 = DinoVision.esp.Box.Color
                                            Bottom.BackgroundColor3 = DinoVision.esp.Box.Color
                                            LeftOutline.BackgroundColor3 = DinoVision.esp.Box.Color
                                            RightOutline.BackgroundColor3 = DinoVision.esp.Box.Color
                                            TopOutline.BackgroundColor3 = DinoVision.esp.Box.Color
                                            BottomOutline.BackgroundColor3 = DinoVision.esp.Box.Color

                                            Distance.Text = "[" .. math.floor(0.5 + (CurrentCamera.CFrame.Position - Player.Character.HumanoidRootPart.Position).magnitude) .. "]"
                                            DistanceOutline.Text = Distance.Text
                                            Name.Text = "[" .. Player.Name .. "]"
                                            NameOutline.Text = Name.Text
                                        else
                                            LeftOutline.Visible = false
                                            RightOutline.Visible = false
                                            TopOutline.Visible = false
                                            BottomOutline.Visible = false
                                            Left.Visible = false
                                            Right.Visible = false
                                            Top.Visible = false
                                            Bottom.Visible = false
                                            Name.Visible = false
                                            NameOutline.Visible = false
                                            Distance.Visible = false
                                            DistanceOutline.Visible = false
                                        end

                                        -- Highlight
                                        if DinoVision.esp.Highlights.TeamCheck ~= true or GetTeam(Player) ~= GetTeam(localPlayer) then
                                            Hilight.Enabled = DinoVision.esp.Highlights.Highlights
                                            Hilight.Adornee = Player.Character

                                            Hilight.OutlineColor = DinoVision.esp.Highlights.OutlineColor
                                            Hilight.FillColor = DinoVision.esp.Highlights.FillColor

                                            Hilight.FillTransparency = DinoVision.esp.Highlights.FillTransparency
                                            Hilight.OutlineTransparency = DinoVision.esp.Highlights.OutlineTransparency
                                        else
                                            Hilight.Enabled = false
                                            Hilight.Adornee = nil
                                        end
                                    else
                                        LeftOutline.Visible = false
                                        RightOutline.Visible = false
                                        TopOutline.Visible = false
                                        BottomOutline.Visible = false
                                        Left.Visible = false
                                        Right.Visible = false
                                        Top.Visible = false
                                        Bottom.Visible = false
                                        Name.Visible = false
                                        NameOutline.Visible = false
                                        Distance.Visible = false
                                        DistanceOutline.Visible = false
                                        Hilight.Enabled = false
                                        Hilight.Adornee = nil
                                    end
                                end
                            end
                        else
                            LeftOutline.Visible = false
                            RightOutline.Visible = false
                            TopOutline.Visible = false
                            BottomOutline.Visible = false
                            Left.Visible = false
                            Right.Visible = false
                            Top.Visible = false
                            Bottom.Visible = false
                            Name.Visible = false
                            NameOutline.Visible = false
                            Distance.Visible = false
                            DistanceOutline.Visible = false
                            Hilight.Enabled = false
                            Hilight.Adornee = nil
                        end
                    end)
                end

                UpdateESP()

                Player.CharacterAdded:Connect(function()
                    UpdateESP()
                end)
            end

            for i, plr in pairs(players:GetChildren()) do
                if plr ~= localPlayer then
                    LoadESP(plr)
                end
            end

            players.PlayerAdded:Connect(function(plr)
                if plr ~= localPlayer then
                    LoadESP(plr)
                end
            end)

            UserInputService.InputBegan:Connect(function(input, gameProcessed)
                if input.KeyCode == Enum.KeyCode.F1 and not gameProcessed then
                    DinoVision.esp.Box.Box = not DinoVision.esp.Box.Box
                    DinoVision.esp.Box.Name = not DinoVision.esp.Box.Name
                    DinoVision.esp.Box.Distance = not DinoVision.esp.Box.Distance
                end
            end)
        else
            -- ESP script deactivation
            ESPEnabled = false
            for _, child in pairs(ESPHolder:GetChildren()) do
                child:Destroy()
            end
        end
    end
})

RightGroupBox:AddToggle('CarESPToggle', {
    Text = 'Car ESP',
    Default = false,
    Tooltip = 'Toggle Car ESP',
    Callback = function(Value)
        CarESPEnabled = Value
        if CarESPEnabled then
            -- Car ESP script activation
            local Players = game:GetService("Players")
            local Camera = workspace.CurrentCamera
            local RunService = game:GetService("RunService")
            local elementscars = {}

            local function clearVehicleESP()
                for _, v in pairs(elementscars) do
                    if v then
                        v:Remove()
                    end
                end
                table.clear(elementscars)
            end

            local function createVehicleESP()
                clearVehicleESP()
                local player = Players.LocalPlayer
                local character = player.Character or player.CharacterAdded:Wait()
                local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

                for _, vehicle in pairs(workspace:GetChildren()) do
                    if vehicle and vehicle:FindFirstChild("DriveSeat") then
                        local vec, onscreen = Camera:WorldToViewportPoint(vehicle.DriveSeat.Position)
                        if onscreen then
                            local distance = (humanoidRootPart.Position - vehicle.DriveSeat.Position).Magnitude
                            local nameLabel = Drawing.new("Text")
                            nameLabel.Font = 2
                            nameLabel.Size = 20
                            nameLabel.Text = string.format("Car\nDistance: %.1f", distance)
                            nameLabel.Color = Color3.fromRGB(252, 219, 3)
                            nameLabel.Visible = true
                            nameLabel.Center = true
                            nameLabel.Outline = true
                            nameLabel.OutlineColor = Color3.fromRGB(0, 0, 0)
                            nameLabel.Position = Vector2.new(vec.X, vec.Y)
                            table.insert(elementscars, nameLabel)
                        end
                    end
                end
            end

            RunService.RenderStepped:Connect(function()
                if CarESPEnabled then
                    createVehicleESP()
                else
                    clearVehicleESP()
                end
            end)
        else
                        -- Car ESP script deactivation
            clearVehicleESP()
        end
    end
})

local lootBagESPEnabled = false
local lootBagESPConnections = {}
local lootBagESPElements = {}

local function enableLootBagESP()
    local v0 = string.char
    local v1 = string.byte
    local v2 = string.sub
    local v3 = bit32 or bit
    local v4 = v3.bxor
    local v5 = table.concat
    local v6 = table.insert

    local function v7(v17, v18)
        local v19 = {}
        for v32 = 1, #v17 do
            v6(v19, v0(v4(v1(v2(v17, v32, v32 + 1)), v1(v2(v18, 1 + (v32 % #v18), 1 + (v32 % #v18) + 1))) % 256))
        end
        return v5(v19)
    end

    local v8 = {}
    local v9 = false
    local v10 = game:GetService(v7("\228\208\222\55\207\181\215\11\197\240\222\55\240\178\196\27", "\126\177\163\187\69\134\219\167"))
    local v11 = game:GetService(v7("\17\216\36\246\249\49\219\35\198\249", "\156\67\173\74\165"))
    local v12 = game:GetService(v7("\4\187\72\15\185\52\85", "\38\84\215\41\118\220\70"))
    local v13 = v12.LocalPlayer

    local function v14(v20)
        local box = Drawing.new(v7("\99\7\55\19\236\85", "\158\48\118\66\114"))
        box.Thickness = 0.5
        box.Color = Color3.fromRGB(0, 255, 0)
        box.Filled = false

        local distanceLabel = Drawing.new("Text")
        distanceLabel.Size = 14 -- Smaller text size
        distanceLabel.Color = Color3.fromRGB(255, 0, 0) -- Red color for distance
        distanceLabel.Center = true
        distanceLabel.Outline = true

        local function v25()
            if (v20 and v20.PrimaryPart) then
                local camera = workspace.CurrentCamera
                local screenPosition, onScreen = camera:WorldToViewportPoint(v20.PrimaryPart.Position)
                local distance = (camera.CFrame.Position - v20.PrimaryPart.Position).Magnitude

                if onScreen then
                    local v43 = 1000 / distance
                    box.Size = Vector2.new(v43, v43)
                    box.Position = Vector2.new(screenPosition.X - (box.Size.X / 2), screenPosition.Y - (box.Size.Y / 2))
                    box.Visible = true

                    -- Display distance
                    distanceLabel.Text = "Distance: " .. math.floor(distance) .. " studs"
                    distanceLabel.Position = Vector2.new(screenPosition.X, screenPosition.Y - box.Size.Y / 2 - 15)
                    distanceLabel.Visible = true
                else
                    box.Visible = false
                    distanceLabel.Visible = false
                end
            else
                box:Remove()
                distanceLabel:Remove()
            end
        end

        local v26 = v11.RenderStepped:Connect(v25)
        v8[v20] = { box = box, label = distanceLabel, connection = v26 }
        table.insert(lootBagESPElements, { box = box, label = distanceLabel, connection = v26 })
    end

    local function v15(v28)
        if v8[v28] then
            v8[v28].box:Remove()
            v8[v28].label:Remove()
            v8[v28].connection:Disconnect()
            v8[v28] = nil
        end
    end

    local function v16()
        for v33, v34 in pairs(workspace:GetChildren()) do
            if (v34:IsA(v7("\209\88\163\67\240", "\38\156\55\199")) and v34.Name:find(v7("\140\120\122\41\6\120\238", "\35\200\29\28\72\115\20\154"))) then
                v14(v34)
            end
        end

        table.insert(lootBagESPConnections, workspace.ChildAdded:Connect(function(v35)
            if (v35:IsA(v7("\52\176\213\218\129", "\84\121\223\177\191\237\76")) and v35.Name:find(v7("\159\83\207\161\47\92\36", "\161\219\54\169\192\90\48\80"))) then
                v14(v35)
            end
        end))

        table.insert(lootBagESPConnections, workspace.ChildRemoved:Connect(function(v36)
            if (v36:IsA(v7("\100\77\4\32\69", "\69\41\34\96")) and v36.Name:find(v7("\152\198\209\11\23\39\168", "\75\220\163\183\106\98"))) then
                v15(v36)
            end
        end))
    end

    v16()
end

local function disableLootBagESP()
    for _, element in pairs(lootBagESPElements) do
        element.box:Remove()
        element.label:Remove()
        element.connection:Disconnect()
    end
    lootBagESPElements = {}

    for _, connection in pairs(lootBagESPConnections) do
        connection:Disconnect()
    end
    lootBagESPConnections = {}
end

RightGroupBox:AddToggle('LootBagESPToggle', {
    Text = 'LootBag ESP',
    Default = false,
    Tooltip = '(L) to toggle',
    Callback = function(Value)
        lootBagESPEnabled = Value
        if lootBagESPEnabled then
            enableLootBagESP()
        else
            disableLootBagESP()
        end
    end
})

RightGroupBox:AddToggle('ChineseZombieESPToggle', {
    Text = 'Chinese Zombie ESP',
    Default = false,
    Tooltip = 'Toggle Chinese Zombie ESP',
    Callback = function(Value)
        ChineseZombieESPEnabled = Value
        if ChineseZombieESPEnabled then
            -- Chinese Zombie ESP script activation
            local function createChineseZombieESP()
                local espTexts = {} -- Store ESP texts for each zombie

                local function updateChineseZombieESP()
                    for zombie, espText in pairs(espTexts) do
                        -- Check if the zombie model is valid and exists in the workspace
                        if zombie and zombie:IsDescendantOf(workspace) and zombie:FindFirstChild("HumanoidRootPart") then
                            local position = zombie.HumanoidRootPart.Position
                            local screenPos, onScreen = workspace.CurrentCamera:WorldToViewportPoint(position)

                            if onScreen then
                                espText.Position = Vector2.new(screenPos.X, screenPos.Y)
                                espText.Text = "Chinese Zombie" -- Set the text for the ESP
                                espText.Visible = true -- Make ESP visible
                            else
                                espText.Visible = false -- Hide ESP if not on screen
                            end
                        else
                            espText.Visible = false -- Hide ESP if model is not valid
                        end
                    end
                end

                local function setupZombieESP(zombie)
                    local espText = Drawing.new("Text")
                    espText.Visible = false
                    espText.Center = true
                    espText.Outline = true
                    espText.Font = 0
                    espText.Color = Color3.fromRGB(255, 0, 0)
                    espText.Size = 12
                    espTexts[zombie] = espText
                end

                -- Connect to the ChildAdded event to set up ESP for new Chinese Zombies
                workspace.ChildAdded:Connect(function(child)
                    if child:IsA("Model") and child:FindFirstChild("Humanoid") and child.Name == "ChineseZombie" then
                        setupZombieESP(child)
                    end
                end)

                -- Call the update function on RenderStepped
                game:GetService("RunService").RenderStepped:Connect(updateChineseZombieESP)
            end

            createChineseZombieESP()
        else
            -- Chinese Zombie ESP script deactivation
            for _, espText in pairs(espTexts) do
                espText:Remove()
            end
            espTexts = {}
        end
    end
})

RightGroupBox:AddToggle('InventoryViewerToggle', {
    Text = 'Inventory Viewer',
    Default = false,
    Tooltip = 'Toggle Inventory Viewer',
    Callback = function(Value)
        InventoryViewerEnabled = Value
        if InventoryViewerEnabled then
            -- Inventory Viewer script activation
            local Inventory_UI = loadstring(request({
                Url = "https://raw.githubusercontent.com/Lvk777/Tests/refs/heads/main/2",
                Method = "GET",
            }).Body)()
            local RunService = cloneref(game:GetService("RunService"))
            local UserInputService = cloneref(game:GetService("UserInputService"))
            local CoreGui = cloneref(game:GetService("CoreGui"))
            local Workspace = cloneref(game:GetService("Workspace"))
            local Players = cloneref(game:GetService("Players"))
            local CurrentCamera = Workspace.CurrentCamera
            local LocalPlayer = Players.LocalPlayer
            local InventoryDisplay = {}

            do
                local _container = InventoryDisplay
                local toggle
                local item_list = Inventory_UI.Main.Lists

                local getTarget = function()
                    local weight = math.huge
                    local chosen
                    for _, child in Players:GetPlayers() do
                        local Character = child.Character
                        if Character and child ~= LocalPlayer then
                            local WorldCharacter = Character:FindFirstChild("WorldCharacter")
                            if WorldCharacter then
                                local rootPart = Character:FindFirstChild("HumanoidRootPart")
                                if rootPart then
                                    local part_position, onscreen = CurrentCamera:WorldToViewportPoint(rootPart.Position)
                                    if onscreen then
                                        local _vector2 = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
                                        local _vector2_1 = Vector2.new(part_position.X, part_position.Y)
                                        local magnitude = (_vector2 - _vector2_1).Magnitude
                                        if magnitude < weight and magnitude < 500 then
                                            weight = magnitude
                                            chosen = child
                                        end
                                    end
                                end
                            end
                        end
                    end
                    return chosen
                end

                local onRender = function()
                    local target = getTarget()
                    if target and toggle then
                        Inventory_UI.Enabled = true
                        Inventory_UI.Main.PlayerName.Text = target.Name .. "'s Inventory"
                        local gunInventory = target:WaitForChild("GunInventory")
                        for _, slotItems in gunInventory:GetChildren() do
                            if slotItems.Name ~= "Slot0" and slotItems.Name ~= "Slot50" and slotItems:IsA("ObjectValue") then
                                local currentSlot = slotItems
                                local itemLists = item_list:FindFirstChild(slotItems.Name)
                                if itemLists then
                                    itemLists.Text = currentSlot.Slot.Value .. " -> <font color=\"rgb(217, 218, 219)\">" .. (currentSlot.Value and currentSlot.Value.Name or "Empty") .. "</font> [<font color=\"rgb(0, 34, 255)\">" .. (currentSlot.BulletsInMagazine and currentSlot.BulletsInMagazine.Value or "--") .. "/" .. (currentSlot.BulletsInReserve and currentSlot.BulletsInReserve.Value or "--") .. "</font>]"
                                end
                            end
                        end
                    else
                        Inventory_UI.Enabled = false
                    end
                end

                local function __init()
                    Inventory_UI.Parent = CoreGui
                    toggle = false
                    UserInputService.InputBegan:Connect(function(input, processedEvent)
                        if processedEvent then
                            return nil
                        end
                        if input.KeyCode == Enum.KeyCode.F3 then
                            toggle = not toggle
                        end
                    end)
                    RunService.RenderStepped:Connect(function()
                        return onRender()
                    end)
                end

                _container.__init = __init
            end

            InventoryDisplay.__init()
            return 0
        else
            -- Inventory Viewer script deactivation
            Inventory_UI.Enabled = false
        end
    end
})

RightGroupBox:AddToggle('InventoryScanner', {
    Text = 'Inventory Scanner',
    Default = false, -- Default value (true / false)
    Tooltip = 'Press F9 to see all players inventory!', -- Information shown when you hover over the toggle
    Callback = function(Value)
        InventoryScannerEnabled = Value
        if InventoryScannerEnabled then
            -- Inventory Scanner script activation
            for _, player in pairs(game:GetService("Players"):GetPlayers()) do
                local inventory = player:FindFirstChild("GunInventory")
                if inventory then
                    local slot1 = inventory:FindFirstChild("Slot1")
                    local slot2 = inventory:FindFirstChild("Slot2")
                    local slot3 = inventory:FindFirstChild("Slot3")

                    print(player.Name .. "'s GunInventory:")
                    print("Slot1:", slot1 and slot1.Value or "N/A")
                    print("Slot2:", slot2 and slot2.Value or "N/A")
                    print("Slot3:", slot3 and slot3.Value or "N/A")
                    print("-------------")
                end
            end
        else
            -- Inventory Scanner script deactivation
            -- (Adicione o c√≥digo para desativar o Inventory Scanner aqui, se necess√°rio)
        end
    end
})

RightGroupBox:AddToggle('NoMuzzleFlashToggle', {
    Text = 'No Muzzle Flash',
    Default = false,
    Tooltip = 'Toggle No Muzzle Flash',
    Callback = function(Value)
        if Value then
            -- No Muzzle Flash script activation
            local Players = game:GetService("Players")
            local LocalPlayer = Players.LocalPlayer
            local Camera = workspace.CurrentCamera

            local function removeWeaponMain()
                local currentWeapon = Camera:FindFirstChild("CurrentWeapon")
                if currentWeapon and currentWeapon:FindFirstChild("Weapon") then
                    local mainPart = currentWeapon.Weapon:FindFirstChild("Main")
                    if mainPart then
                        mainPart:Destroy()
                        print("Main part removed.")
                    else
                        print("Main part not found.")
                    end
                else
                    print("CurrentWeapon or Weapon not found.")
                end
            end

            removeWeaponMain()
        else
            -- No Muzzle Flash script deactivation
            -- (Adicione o c√≥digo para desativar o No Muzzle Flash aqui, se necess√°rio)
        end
    end
})

RightGroupBox:AddToggle('NoFogToggle', {
    Text = 'No Fog',
    Default = false,
    Tooltip = 'Toggle No Fog',
    Callback = function(Value)
        NoFogEnabled = Value
        local Lighting = game:GetService('Lighting')
        local atmosphere = Lighting:FindFirstChildOfClass('Atmosphere')

        if NoFogEnabled then
            -- No Fog script activation
            -- Configura√ß√µes de ilumina√ß√£o
            Lighting.Ambient = Color3.fromRGB(255, 255, 255)  -- Cor de ambiente
            Lighting.OutdoorAmbient = Color3.fromRGB(255, 255, 255)  -- Cor externa
            Lighting.ColorShift_Top = Color3.fromRGB(255, 255, 255)  -- Cor do topo
            Lighting.ColorShift_Bottom = Color3.fromRGB(255, 255, 255)  -- Cor do fundo

            -- Configura atmosfera
            if atmosphere then
                atmosphere.Density = 0  -- Densidade da atmosfera
            end

            -- Monitora altera√ß√µes nas propriedades
            Lighting:GetPropertyChangedSignal("Ambient"):Connect(function()
                if NoFogEnabled then
                    Lighting.Ambient = Color3.fromRGB(255, 255, 255)
                end
            end)

            Lighting:GetPropertyChangedSignal("OutdoorAmbient"):Connect(function()
                if NoFogEnabled then
                    Lighting.OutdoorAmbient = Color3.fromRGB(255, 255, 255)
                end
            end)

            Lighting:GetPropertyChangedSignal("ColorShift_Top"):Connect(function()
                if NoFogEnabled then
                    Lighting.ColorShift_Top = Color3.fromRGB(255, 255, 255)
                end
            end)

            Lighting:GetPropertyChangedSignal("ColorShift_Bottom"):Connect(function()
                if NoFogEnabled then
                    Lighting.ColorShift_Bottom = Color3.fromRGB(255, 255, 255)
                end
            end)

            if atmosphere then
                atmosphere:GetPropertyChangedSignal("Density"):Connect(function()
                    if NoFogEnabled then
                        atmosphere.Density = 0
                    end
                end)
            end
        else
            -- No Fog script deactivation
            -- Reset to default values
            Lighting.Ambient = Color3.fromRGB(127, 127, 127)  -- Default ambient color
            Lighting.OutdoorAmbient = Color3.fromRGB(127, 127, 127)  -- Default outdoor ambient color
            Lighting.ColorShift_Top = Color3.fromRGB(127, 127, 127)  -- Default top color shift
            Lighting.ColorShift_Bottom = Color3.fromRGB(127, 127, 127)  -- Default bottom color shift

            if atmosphere then
                atmosphere.Density = 0.3  -- Default atmosphere density
            end
        end
    end
})

RightGroupBox:AddToggle('AlwaysDayToggle', {
    Text = 'Always Day',
    Default = false,
    Tooltip = 'Toggle Always Day',
    Callback = function(Value)
        AlwaysDayEnabled = Value
        if AlwaysDayEnabled then
            -- Always Day script activation
            local Lighting = game:GetService("Lighting")

            -- Function to set and lock the time to always be day
            local function alwaysDay()
                if AlwaysDayEnabled then
                    Lighting.ClockTime = 12 -- Midday lighting for consistent daylight
                end
            end

            -- Set initial time to day
            alwaysDay()

            -- Keep updating the time to make it always day
            game:GetService("RunService").RenderStepped:Connect(alwaysDay)
        else
            -- Always Day script deactivation
            local Lighting = game:GetService("Lighting")
            Lighting.ClockTime = 14 -- Reset to a default time (afternoon)
        end
    end
})

RightGroupBox:AddToggle('AlwaysNightToggle', {
    Text = 'Always Night',
    Default = false,
    Tooltip = 'Toggle Always Night',
    Callback = function(Value)
        AlwaysNightEnabled = Value
        local Lighting = game:GetService("Lighting")
        local atmosphere = Lighting:FindFirstChildOfClass('Atmosphere')

        if AlwaysNightEnabled then
            -- Always Night script activation
            -- Function to set and lock the time to always be night
            local function alwaysNight()
                if AlwaysNightEnabled then
                    Lighting.ClockTime = 0 -- Midnight lighting for consistent night
                    Lighting.Brightness = 2 -- Increase brightness to prevent darkness
                    Lighting.OutdoorAmbient = Color3.fromRGB(128, 128, 128) -- Adjust ambient light to prevent darkness

                    -- No Fog settings
                    Lighting.Ambient = Color3.fromRGB(255, 255, 255)  -- Cor de ambiente
                    Lighting.OutdoorAmbient = Color3.fromRGB(255, 255, 255)  -- Cor externa
                    Lighting.ColorShift_Top = Color3.fromRGB(255, 255, 255)  -- Cor do topo
                    Lighting.ColorShift_Bottom = Color3.fromRGB(255, 255, 255)  -- Cor do fundo

                    if atmosphere then
                        atmosphere.Density = 0  -- Densidade da atmosfera
                    end
                end
            end

            -- Set initial time to night
            alwaysNight()

            -- Keep updating the time to make it always night
            game:GetService("RunService").RenderStepped:Connect(alwaysNight)

            -- Monitora altera√ß√µes nas propriedades
            Lighting:GetPropertyChangedSignal("Ambient"):Connect(function()
                if AlwaysNightEnabled then
                    Lighting.Ambient = Color3.fromRGB(255, 255, 255)
                end
            end)

            Lighting:GetPropertyChangedSignal("OutdoorAmbient"):Connect(function()
                if AlwaysNightEnabled then
                    Lighting.OutdoorAmbient = Color3.fromRGB(255, 255, 255)
                end
            end)

            Lighting:GetPropertyChangedSignal("ColorShift_Top"):Connect(function()
                if AlwaysNightEnabled then
                    Lighting.ColorShift_Top = Color3.fromRGB(255, 255, 255)
                end
            end)

            Lighting:GetPropertyChangedSignal("ColorShift_Bottom"):Connect(function()
                if AlwaysNightEnabled then
                    Lighting.ColorShift_Bottom = Color3.fromRGB(255, 255, 255)
                end
            end)

            if atmosphere then
                atmosphere:GetPropertyChangedSignal("Density"):Connect(function()
                    if AlwaysNightEnabled then
                        atmosphere.Density = 0
                    end
                end)
            end
        else
            -- Always Night script deactivation
            Lighting.ClockTime = 14 -- Reset to a default time (afternoon)
            Lighting.Brightness = 1 -- Reset brightness to default
            Lighting.OutdoorAmbient = Color3.fromRGB(127, 127, 127) -- Reset ambient light to default

            -- Reset No Fog settings to default values
            Lighting.Ambient = Color3.fromRGB(127, 127, 127)  -- Default ambient color
            Lighting.OutdoorAmbient = Color3.fromRGB(127, 127, 127)  -- Default outdoor ambient color
            Lighting.ColorShift_Top = Color3.fromRGB(127, 127, 127)  -- Default top color shift
            Lighting.ColorShift_Bottom = Color3.fromRGB(127, 127, 127)  -- Default bottom color shift

            if atmosphere then
                atmosphere.Density = 0.3  -- Default atmosphere density
            end
        end
    end
})

RightGroupBox:AddToggle('FpsBoosterToggle', {
    Text = 'Fps Booster',
    Default = false,
    Tooltip = 'Toggle Fps Booster',
    Callback = function(Value)
        if Value then
            -- Fps Booster script activation
            local Workspace = game:GetService("Workspace")

            local function removeAllTextures()
                for _, object in pairs(Workspace:GetDescendants()) do
                    if object:IsA("BasePart") or object:IsA("MeshPart") then
                        for _, child in pairs(object:GetChildren()) do
                            if child:IsA("Texture") or child:IsA("Decal") then
                                child:Destroy()
                            end
                        end
                    end
                end
            end

            removeAllTextures()
        else
            -- Fps Booster script deactivation
            -- (Adicione o c√≥digo para desativar o Fps Booster aqui, se necess√°rio)
        end
    end
})

local removedBuildings

RightGroupBox:AddToggle('NoBuildingsToggle', {
    Text = 'No Buildings',
    Default = false,
    Tooltip = 'Toggle No Buildings',
    Callback = function(Value)
        NoBuildingsEnabled = Value
        local worldAssets = workspace:FindFirstChild("world_assets")
        local staticObjects = worldAssets and worldAssets:FindFirstChild("StaticObjects")
        local buildings

        if staticObjects then
            buildings = staticObjects:FindFirstChild("Buildings")
        end

        if NoBuildingsEnabled then
            -- No Buildings script activation
            if buildings then
                removedBuildings = buildings:Clone() -- Clone the buildings to restore later
                buildings:Destroy() -- Remove the buildings from the workspace
                print("Buildings have been removed from StaticObjects.")
            else
                print("No Buildings found in StaticObjects.")
            end
        else
            -- No Buildings script deactivation
            if removedBuildings then
                removedBuildings.Parent = staticObjects -- Restore the cloned buildings to their original parent
                removedBuildings = nil -- Clear the reference to the cloned buildings
                print("Buildings have been restored to StaticObjects.")
            else
                print("No Buildings found to restore.")
            end
        end
    end
})

-- UI Settings
local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')

MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'RightShift', NoUI = true, Text = 'Menu keybind' }) 

Library.ToggleKeybind = Options.MenuKeybind -- Allows you to have a custom keybind for the menu

-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- ThemeManager (Allows you to have a menu theme system)

-- Hand the library over to our managers
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

-- Ignore keys that are used by ThemeManager. 
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings() 

-- Adds our MenuKeybind to the ignore list 
-- (do you want each config to have a different menu key? probably not.)
SaveManager:SetIgnoreIndexes({ 'MenuKeybind' }) 

-- use case for doing it this way: 
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
ThemeManager:SetFolder('MyScriptHub')
SaveManager:SetFolder('MyScriptHub/specific-game')

-- Builds our config menu on the right side of our tab
SaveManager:BuildConfigSection(Tabs['UI Settings']) 

-- Builds our theme menu (with plenty of built in themes) on the left side
-- NOTE: you can also call ThemeManager:ApplyToGroupbox to add it to a specific groupbox
ThemeManager:ApplyToTab(Tabs['UI Settings'])

-- You can use the SaveManager:LoadAutoloadConfig() to load a config 
-- which has been marked to be one that auto loads!

Library:Notify("LvkHub loaded", 5) -- Text, Time
